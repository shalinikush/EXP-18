DESCRIPTION OF EXPERIMENT:



A. Express Server Setup:

const express = require("express");
const app = express();
const port = 3000;

app.use(express.json());--------------------------------------------------------------> CODE BLOCK


Explanation:

Express.js is initialized to create the backend server.

express.json() middleware is used to parse incoming JSON requests.

The server will listen on port 3000.---------------------------------------------------------EXPLANATION



B. Account Creation Route:

let accounts = [];

app.post("/accounts", (req, res) => {
  const { name, balance } = req.body;
  if (!name || balance == null) {
    return res.status(400).json({ message: "Name and balance are required" });
  }
  const existing = accounts.find(acc => acc.name === name);
  if (existing) return res.status(400).json({ message: "Account already exists" });
  const account = { name, balance: Number(balance) };
  accounts.push(account);
  res.status(201).json({ message: "Account created", account });
});
---------------------------------------------------------------------------------------------------> CODE BLOCK


Explanation:

This route allows creation of a new account.

It accepts a name and an initial balance in the request body.

If an account already exists with the same name, an error is returned.

Otherwise, the account is stored in the in-memory accounts array.
------------------------------------------------------------------------------------------------------> EXPLANATION


C. Get All Accounts Route:

app.get("/accounts", (req, res) => {
  res.status(200).json(accounts);
});-----------------------------------------------------------------------------> CODE BLOCK



Explanation:

This route retrieves and displays all created accounts.

It helps verify account balances before and after a transfer.---------------------------------------------------EXPLANATION



D. Money Transfer Route:

app.post("/transfer", (req, res) => {
  const { from, to, amount } = req.body;
  if (!from || !to || !amount) return res.status(400).json({ message: "Missing fields" });

  const sender = accounts.find(acc => acc.name === from);
  const receiver = accounts.find(acc => acc.name === to);

  if (!sender || !receiver) return res.status(404).json({ message: "Account not found" });
  if (sender.balance < amount) return res.status(400).json({ message: "Insufficient balance in sender account" });

  sender.balance -= Number(amount);
  receiver.balance += Number(amount);

  res.status(200).json({
    message: "Transfer successful",
    from,
    to,
    amount: Number(amount),
    senderNewBalance: sender.balance,
    receiverNewBalance: receiver.balance,
  });
});---------------------------------------------------------------------------------> CODE BLOCK



Explanation:

This route handles transferring funds between two accounts.

It validates that both accounts exist and that the sender has enough balance.

If valid, the sender’s balance decreases and the receiver’s balance increases.

It returns a success message with the updated balances.

If invalid, it returns a meaningful error (e.g., "Account not found" or "Insufficient balance").

---------------------------------------------------------------------------------------------------------------------> EXPLANATION BLOCK

